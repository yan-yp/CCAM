opencv_python==4.4.0.46
albumentations==0.5.1 --no-binary=imgaug,albumentations
ray>=1.0.1
einops==0.3.0
kornia==0.4.1
loguru==0.5.3
yacs>=0.1.8
tqdm
autopep8
pylint
ipython
jupyterlab
matplotlib
h5py==3.1.0
pytorch-lightning==1.3.5
torchmetrics==0.6.0  # version problem: https://github.com/NVIDIA/DeepLearningExamples/issues/1113#issuecomment-1102969461
joblib>=1.0.1


    nearest_index1_full = torch.zeros(N, w1 * h1, device=device, dtype=torch.int64)
    nearest_index0_full = torch.zeros(N, w0 * h0, device=device, dtype=torch.int64)

    for b in range(w_pt0_c_round.size(0)):
        for i in range(w_pt0_c_round.size(1)):
            index1 = w_pt1_c_round[b, i, 0] + w_pt1_c_round[b, i, 1] * w1
            index0 = w_pt0_c_round[b, i, 0] + w_pt0_c_round[b, i, 1] * w1
            nearest_index1_full[b, index1] = index0
            nearest_index0_full[b, index0] = index1

    # corner case: out of boundary
    def out_bound_mask2(nearest_indexfull, pt_all, w, h):
        for b in range(pt_all.size(0)):
            for i in range(pt_all.size(1)):
                pt = pt_all[b, i]
                if (pt[..., 0] < 0) + (pt[..., 0] >= w) + (pt[..., 1] < 0) + (pt[..., 1] >= h):
                    nearest_indexfull[b, pt[..., 0] + pt[..., 1] * w] = 0

    out_bound_mask2(nearest_index1_full, w_pt0_c_round, w1, h1)
    out_bound_mask2(nearest_index0_full, w_pt1_c_round, w0, h0)
    loop_back_full = torch.stack([nearest_index0_full[_b][_i] for _b, _i in enumerate(nearest_index1_full)], dim=0)

    correct_0to1 = loop_back_full == torch.arange(h0 * w0, device=device)[None].repeat(N, 1)
    correct_0to1[:, 0] = False  # ignore the top-left corner


    2\
     # 1. make kpt mask
    device = data['image0'].device
    N, _, h0, w0 = data['image0'].shape
    _, _, h1, w1 = data['image1'].shape
    grid_pt0_r = data['keypoints0']
    grid_pt1_r = data['keypoints1']
    grid_index0 = grid_pt0_r[..., 0] + grid_pt0_r[..., 1] * w0
    grid_index1 = grid_pt1_r[..., 0] + grid_pt1_r[..., 1] * w1
    grid_index0, grid_index1 = grid_index0.long(), grid_index1.long()
    grid_index0_list, grid_index1_list = grid_index0.tolist(), grid_index1.tolist()
    nearest_index_map0, nearest_index_map1 = dict(), dict()

    # kpt_mask0 = torch.zeros(N, w0 * h0, device=device)
    # kpt_mask1 = torch.zeros(N, w1 * h1, device=device)
    # for b, i in enumerate(zip(index0, index1)):
    #     kpt_mask0[b, i[0]] = 1
    #     kpt_mask1[b, i[1]] = 1
    # kpt_mask0, kpt_mask1 = kpt_mask0.bool(), kpt_mask1.bool()

    # 1. read keypoints in image resolution
    scale0 = data['scale0'][:, None]
    scale1 = data['scale1'][:, None]
    grid_pt0_i = scale0 * grid_pt0_r
    grid_pt1_i = scale1 * grid_pt1_r

    # 2. warp grids w/o masking
    # warp kpts bi-directionally and resize them to coarse-level resolution
    # (no depth consistency check, since it leads to worse results experimentally)
    # (unhandled edge case: points with 0-depth will be warped to the left-up corner)
    _, w_pt0_i = warp_kpts(grid_pt0_i, data['depth0'], data['depth1'], data['T_0to1'], data['K0'], data['K1'])
    _, w_pt1_i = warp_kpts(grid_pt1_i, data['depth1'], data['depth0'], data['T_1to0'], data['K1'], data['K0'])
    w_pt0_r = w_pt0_i / scale1
    w_pt1_r = w_pt1_i / scale0

    w_pt0_r_round = w_pt0_r[:, :, :].round().long()
    nearest_index1 = w_pt0_r_round[..., 0] + w_pt0_r_round[..., 1] * w1
    w_pt1_r_round = w_pt1_r[:, :, :].round().long()
    nearest_index0 = w_pt1_r_round[..., 0] + w_pt1_r_round[..., 1] * w0

    for b in range(len(grid_index0_list)):
        for i in range(len(grid_index0_list[b])):
            nearest_index_map1[str(grid_index1_list[b][i])] = nearest_index1[b, i]
            nearest_index_map0[str(grid_index0_list[b][i])] = nearest_index0[b, i]

    # corner case: out of boundary
    def out_bound_mask2(nearest_indexfull, pt_all, w, h):
        for b in range(pt_all.size(0)):
            for i in range(pt_all.size(1)):
                pt = pt_all[b, i]
                if (pt[..., 0] < 0) + (pt[..., 0] >= w) + (pt[..., 1] < 0) + (pt[..., 1] >= h):
                    nearest_indexfull[b, pt[..., 0] + pt[..., 1] * w] = 0

    out_bound_mask2(nearest_index1_full, w_pt0_r_round, w1, h1)
    out_bound_mask2(nearest_index0_full, w_pt1_r_round, w0, h0)
    loop_back_full = torch.stack([nearest_index0_full[_b][_i] for _b, _i in enumerate(nearest_index1_full)], dim=0)

    correct_0to1 = loop_back_full == torch.arange(h0 * w0, device=device)[None].repeat(N, 1)
    correct_0to1[:, 0] = False  # ignore the top-left corner

    # 4. construct a gt conf_matrix
    conf_matrix_gt = torch.zeros(N, h0 * w0, h1 * w1, device=device)
    b_ids, i_ids = torch.where(correct_0to1 != 0)
    j_ids = nearest_index1_full[b_ids, i_ids]

    conf_matrix_gt[b_ids, i_ids, j_ids] = 1
    for b, m in enumerate(zip(kpt_mask0, kpt_mask1)):
        conf_matrix_gt = conf_matrix_gt[b, m[0], m[1]]
